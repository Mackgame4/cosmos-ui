/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CAvatar {
        "alt": string;
        "size": string;
        "src": string;
        "text": string;
        "variant": string;
    }
    interface CBadge {
        "size": string;
        "type": string;
        "variant": string;
    }
    interface CButton {
        "appendIcon": string;
        "classIcon": string;
        "disabled": boolean;
        "prependIcon": string;
        "size": string;
        "variant": string;
    }
    interface CCheckbox {
        "checked": boolean;
        "description": string;
        "disabled": boolean;
    }
    interface CIcon {
        "class": string;
        "color": string;
        "name": string;
        "size": string;
        "strokeWidth": string;
    }
    interface CInput {
        "disabled": boolean;
        "label": string;
        "max": string;
        "min": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "step": string;
        "type": string;
        "value": string;
    }
    interface CLabel {
        "htmlFor": string;
    }
    interface CProvider {
    }
}
declare global {
    interface HTMLCAvatarElement extends Components.CAvatar, HTMLStencilElement {
    }
    var HTMLCAvatarElement: {
        prototype: HTMLCAvatarElement;
        new (): HTMLCAvatarElement;
    };
    interface HTMLCBadgeElement extends Components.CBadge, HTMLStencilElement {
    }
    var HTMLCBadgeElement: {
        prototype: HTMLCBadgeElement;
        new (): HTMLCBadgeElement;
    };
    interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {
    }
    var HTMLCButtonElement: {
        prototype: HTMLCButtonElement;
        new (): HTMLCButtonElement;
    };
    interface HTMLCCheckboxElement extends Components.CCheckbox, HTMLStencilElement {
    }
    var HTMLCCheckboxElement: {
        prototype: HTMLCCheckboxElement;
        new (): HTMLCCheckboxElement;
    };
    interface HTMLCIconElement extends Components.CIcon, HTMLStencilElement {
    }
    var HTMLCIconElement: {
        prototype: HTMLCIconElement;
        new (): HTMLCIconElement;
    };
    interface HTMLCInputElement extends Components.CInput, HTMLStencilElement {
    }
    var HTMLCInputElement: {
        prototype: HTMLCInputElement;
        new (): HTMLCInputElement;
    };
    interface HTMLCLabelElement extends Components.CLabel, HTMLStencilElement {
    }
    var HTMLCLabelElement: {
        prototype: HTMLCLabelElement;
        new (): HTMLCLabelElement;
    };
    interface HTMLCProviderElement extends Components.CProvider, HTMLStencilElement {
    }
    var HTMLCProviderElement: {
        prototype: HTMLCProviderElement;
        new (): HTMLCProviderElement;
    };
    interface HTMLElementTagNameMap {
        "c-avatar": HTMLCAvatarElement;
        "c-badge": HTMLCBadgeElement;
        "c-button": HTMLCButtonElement;
        "c-checkbox": HTMLCCheckboxElement;
        "c-icon": HTMLCIconElement;
        "c-input": HTMLCInputElement;
        "c-label": HTMLCLabelElement;
        "c-provider": HTMLCProviderElement;
    }
}
declare namespace LocalJSX {
    interface CAvatar {
        "alt"?: string;
        "size"?: string;
        "src"?: string;
        "text"?: string;
        "variant"?: string;
    }
    interface CBadge {
        "size"?: string;
        "type"?: string;
        "variant"?: string;
    }
    interface CButton {
        "appendIcon"?: string;
        "classIcon"?: string;
        "disabled"?: boolean;
        "prependIcon"?: string;
        "size"?: string;
        "variant"?: string;
    }
    interface CCheckbox {
        "checked"?: boolean;
        "description"?: string;
        "disabled"?: boolean;
    }
    interface CIcon {
        "class"?: string;
        "color"?: string;
        "name"?: string;
        "size"?: string;
        "strokeWidth"?: string;
    }
    interface CInput {
        "disabled"?: boolean;
        "label"?: string;
        "max"?: string;
        "min"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "step"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface CLabel {
        "htmlFor"?: string;
    }
    interface CProvider {
    }
    interface IntrinsicElements {
        "c-avatar": CAvatar;
        "c-badge": CBadge;
        "c-button": CButton;
        "c-checkbox": CCheckbox;
        "c-icon": CIcon;
        "c-input": CInput;
        "c-label": CLabel;
        "c-provider": CProvider;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "c-avatar": LocalJSX.CAvatar & JSXBase.HTMLAttributes<HTMLCAvatarElement>;
            "c-badge": LocalJSX.CBadge & JSXBase.HTMLAttributes<HTMLCBadgeElement>;
            "c-button": LocalJSX.CButton & JSXBase.HTMLAttributes<HTMLCButtonElement>;
            "c-checkbox": LocalJSX.CCheckbox & JSXBase.HTMLAttributes<HTMLCCheckboxElement>;
            "c-icon": LocalJSX.CIcon & JSXBase.HTMLAttributes<HTMLCIconElement>;
            "c-input": LocalJSX.CInput & JSXBase.HTMLAttributes<HTMLCInputElement>;
            "c-label": LocalJSX.CLabel & JSXBase.HTMLAttributes<HTMLCLabelElement>;
            "c-provider": LocalJSX.CProvider & JSXBase.HTMLAttributes<HTMLCProviderElement>;
        }
    }
}
